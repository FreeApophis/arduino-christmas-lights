template<typename TElement, int NSize>
auto arraySize(TElement (&array)[NSize]) -> int
{
    return NSize;
}

AnimationManager animationManager(&strip, animations, arraySize(animations), clearances, arraySize(clearances));

WiFiClient wifi;
MQTTClient mqtt;
int status = WL_IDLE_STATUS;

auto randomize() -> void
{
    uint32_t rnd = 0;
    for (byte i = A0; i < A4; ++i) {
        pinMode(i, INPUT);
        rnd <<= 6;
        rnd += analogRead(i);
    }
    randomSeed(rnd);
}

const char nextAnimationTopic[] = "/home/christmas-lights/next-animation";
const char currentAnimationTopic[] = "/home/christmas-lights/current-animation";

auto messageReceived(String& topic, String& payload) -> void {
  if(topic == nextAnimationTopic) {
    animationManager.StartAnimation(static_cast<uint16_t>(payload.toInt()));
  }
}

auto connectWifi() -> void {
  // check for the presence of the shield:
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    // don't continue:
    while (true);
  }

  // attempt to connect to WiFi network:
  while ( status != WL_CONNECTED) {
    Serial.print("Attempting to connect to WPA SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network:
    status = WiFi.begin(ssid, pass);

    // wait 10 seconds for connection:
    delay(10000);
  }
}

auto connectMqtt() -> void {
  Serial.print("\nconnecting to mqtt...");

  mqtt.begin("192.168.178.40", wifi);
  mqtt.onMessage(messageReceived);

  while (!mqtt.connect("arduino", "try", "try")) {
    Serial.print(".");
    delay(1000);
  }

  Serial.println("\nconnected!");

  mqtt.subscribe(nextAnimationTopic);
}

auto openSerialPort() -> void {
  Serial.begin(9600);
  // while (!Serial) {}
}

auto setup() -> void
{
    openSerialPort();
    randomize();
    connectWifi();
    connectMqtt();

    strip.begin();
    strip.show();

	pinMode(LED_BUILTIN, OUTPUT);

	for (int i = 0; i < 50; ++i) {
		digitalWrite(LED_BUILTIN, LOW);
		delay(100);
		digitalWrite(LED_BUILTIN, HIGH);
		delay(100);
	}

    animationManager.Init(&off);
}


uint16_t currentAnimationId = 0xffff;

auto loop() -> void
{
    mqtt.loop();
    animationManager.Show();
	if (currentAnimationId != animationManager.CurrentAnimationId()) {
	  mqtt.publish(currentAnimationTopic, String(animationManager.CurrentAnimationId()));
	  currentAnimationId = animationManager.CurrentAnimationId();
	}
	
}